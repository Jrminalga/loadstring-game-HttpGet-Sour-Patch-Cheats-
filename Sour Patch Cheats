local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()

local Window = Rayfield:CreateWindow({
    Name = "Sour Patch",
    LoadingTitle = "Sour Patch",
    LoadingSubtitle = "by Jrminalga",
    Theme = "Default",
    ConfigurationSaving = {
       Enabled = true,
       FolderName = nil,
       FileName = "Big Hub"
    },
    Discord = {
       Enabled = false,
       Invite = "noinvitelink",
       RememberJoins = true
    },
    KeySystem = false,
    KeySettings = {
       Title = "Untitled",
       Subtitle = "Key System",
       Note = "No method of obtaining the key is provided",
       FileName = "Key",
       SaveKey = true,
       GrabKeyFromSite = false,
       Key = {"Hello"}
    }
})

local MainTab = Window:CreateTab("Main", 4483362458)
local ThemesTab = Window:CreateTab("Themes", 4483362458)

-- Silent Aim Section
local silentAimSettings = {
    Enabled = false,
    ShowFOV = true,
    FOVSize = 60,
    FOVColor = Color3.new(1, 0, 0),
    FOVTransparency = 0.5,
    FOVFilled = false,
    FOVThickness = 1
}

local silentAimConnections = {}
local fovCircle = nil

-- ESP Section
local espSettings = {
    Enabled = false,
    ShowNames = true,
    ShowEveryone = false,
    ShowDot = true,
    DotSize = 4,
    NameSize = 18,
    BoxColor = Color3.new(1, 0, 0),
    NameColor = Color3.new(1, 1, 1),
    DotColor = Color3.new(1, 1, 0),
    RainbowMode = false,
    RainbowSpeed = 1
}

local espObjects = {}
local espConnections = {}
local rainbowHue = 0

-- Shared Functions
local function isDrawingSupported()
    local success, _ = pcall(function()
        return Drawing.new("Square")
    end)
    return success
end

-- Rainbow color generator
local function getRainbowColor(hue)
    return Color3.fromHSV(hue, 1, 1)
end

-- FOV Circle Functions
local function createFOV()
    if not isDrawingSupported() then return end
    
    fovCircle = Drawing.new("Circle")
    fovCircle.Visible = silentAimSettings.Enabled and silentAimSettings.ShowFOV
    fovCircle.Color = silentAimSettings.FOVColor
    fovCircle.Transparency = silentAimSettings.FOVTransparency
    fovCircle.Filled = silentAimSettings.FOVFilled
    fovCircle.Thickness = silentAimSettings.FOVThickness
    fovCircle.Radius = silentAimSettings.FOVSize
    fovCircle.Position = Vector2.new(workspace.CurrentCamera.ViewportSize.X/2, workspace.CurrentCamera.ViewportSize.Y/2)
end

local function updateFOV()
    if not fovCircle then return end
    
    fovCircle.Visible = silentAimSettings.Enabled and silentAimSettings.ShowFOV
    fovCircle.Color = silentAimSettings.FOVColor
    fovCircle.Transparency = silentAimSettings.FOVTransparency
    fovCircle.Filled = silentAimSettings.FOVFilled
    fovCircle.Thickness = silentAimSettings.FOVThickness
    fovCircle.Radius = silentAimSettings.FOVSize
end

-- ESP Functions
local function createEsp(player)
    if not isDrawingSupported() then
        warn("Drawing library not supported in this environment!")
        return
    end

    local character = player.Character or player.CharacterAdded:Wait()
    if not character then return end

    local humanoidRootPart = character:FindFirstChild("HumanoidRootPart")
    local humanoid = character:FindFirstChild("Humanoid")
    local head = character:FindFirstChild("Head")
    if not humanoidRootPart or not humanoid or not head then return end

    -- Create ESP Box
    local espBox = Drawing.new("Square")
    espBox.Visible = false
    espBox.Color = espSettings.RainbowMode and getRainbowColor(rainbowHue) or espSettings.BoxColor
    espBox.Thickness = 1
    espBox.Filled = false
    espBox.ZIndex = 1

    -- Create Name Tag
    local nameTag = Drawing.new("Text")
    nameTag.Visible = false
    nameTag.Color = espSettings.NameColor
    nameTag.Size = espSettings.NameSize
    nameTag.Center = true
    nameTag.Outline = true
    nameTag.OutlineColor = Color3.new(0, 0, 0)
    nameTag.Text = player.Name
    nameTag.ZIndex = 2

    -- Create Head Dot
    local headDot = Drawing.new("Circle")
    headDot.Visible = false
    headDot.Color = espSettings.RainbowMode and getRainbowColor(rainbowHue) or espSettings.DotColor
    headDot.Thickness = 1
    headDot.Filled = true
    headDot.Transparency = 1
    headDot.Radius = espSettings.DotSize
    headDot.ZIndex = 3

    espObjects[player] = {
        box = espBox,
        name = nameTag,
        dot = headDot,
        character = character,
        connection = character:GetPropertyChangedSignal("Parent"):Connect(function()
            if not character.Parent then
                espBox:Remove()
                nameTag:Remove()
                headDot:Remove()
                espObjects[player] = nil
            end
        end)
    }

    local function updateEsp()
        if not espSettings.Enabled or not character or not humanoidRootPart or humanoid.Health <= 0 then
            espBox.Visible = false
            nameTag.Visible = false
            headDot.Visible = false
            return
        end

        -- Skip team check if ShowEveryone is enabled
        if not espSettings.ShowEveryone then
            local localPlayer = game.Players.LocalPlayer
            if player.Team and localPlayer.Team and player.Team == localPlayer.Team then
                espBox.Visible = false
                nameTag.Visible = false
                headDot.Visible = false
                return
            end
        end

        local rootPosition, rootVisible = workspace.CurrentCamera:WorldToViewportPoint(humanoidRootPart.Position)
        local headPosition, headVisible = workspace.CurrentCamera:WorldToViewportPoint(head.Position)
        
        if rootVisible then
            local size = (workspace.CurrentCamera:WorldToViewportPoint(humanoidRootPart.Position - Vector3.new(0, 3, 0))).Y - 
                         (workspace.CurrentCamera:WorldToViewportPoint(humanoidRootPart.Position + Vector3.new(0, 2.5, 0))).Y
            local scale = math.abs(size / 2)
            
            espBox.Size = Vector2.new(scale * 1.5, scale * 1.9)
            espBox.Position = Vector2.new(rootPosition.X - espBox.Size.X / 2, rootPosition.Y - espBox.Size.Y / 2)
            espBox.Visible = true

            nameTag.Size = espSettings.NameSize
            nameTag.Position = Vector2.new(rootPosition.X, rootPosition.Y - espBox.Size.Y / 2 - 20)
            nameTag.Visible = espSettings.ShowNames
            
            if headVisible and espSettings.ShowDot then
                headDot.Position = Vector2.new(headPosition.X, headPosition.Y)
                headDot.Radius = espSettings.DotSize
                headDot.Visible = true
            else
                headDot.Visible = false
            end
        else
            espBox.Visible = false
            nameTag.Visible = false
            headDot.Visible = false
        end
    end

    game:GetService("RunService").RenderStepped:Connect(updateEsp)
end

local function removeEsp(player)
    if espObjects[player] then
        if espObjects[player].box then espObjects[player].box:Remove() end
        if espObjects[player].name then espObjects[player].name:Remove() end
        if espObjects[player].dot then espObjects[player].dot:Remove() end
        if espObjects[player].connection then espObjects[player].connection:Disconnect() end
        espObjects[player] = nil
    end
end

local function updateAllEsp()
    for player, data in pairs(espObjects) do
        if data.box then
            data.box.Color = espSettings.RainbowMode and getRainbowColor(rainbowHue) or espSettings.BoxColor
        end
        if data.name then
            data.name.Size = espSettings.NameSize
            data.name.Visible = espSettings.ShowNames and espSettings.Enabled
        end
        if data.dot then
            data.dot.Color = espSettings.RainbowMode and getRainbowColor(rainbowHue) or espSettings.DotColor
            data.dot.Visible = espSettings.ShowDot and espSettings.Enabled
            data.dot.Radius = espSettings.DotSize
        end
    end
end

local function setupEsp()
    for _, player in ipairs(game.Players:GetPlayers()) do
        if player ~= game.Players.LocalPlayer then
            coroutine.wrap(function()
                if espSettings.Enabled then
                    if not player.Character then
                        player.CharacterAdded:Wait()
                    end
                    createEsp(player)
                else
                    removeEsp(player)
                end
            end)()
        end
    end
end

-- Rainbow effect update
game:GetService("RunService").Heartbeat:Connect(function(delta)
    if espSettings.RainbowMode then
        rainbowHue = (rainbowHue + delta * 0.25 * espSettings.RainbowSpeed) % 1
        for _, data in pairs(espObjects) do
            if data.box then
                data.box.Color = getRainbowColor(rainbowHue)
            end
            if data.dot then
                data.dot.Color = getRainbowColor(rainbowHue)
            end
        end
    end
end)

-- FOV Controls
MainTab:CreateToggle({
    Name = "Show FOV Circle",
    CurrentValue = silentAimSettings.ShowFOV,
    Flag = "SilentAimShowFOV",
    Callback = function(Value)
        silentAimSettings.ShowFOV = Value
        updateFOV()
    end,
})

MainTab:CreateSlider({
    Name = "FOV Size",
    Range = {20, 200},
    Increment = 5,
    Suffix = "px",
    CurrentValue = silentAimSettings.FOVSize,
    Flag = "FOVSize",
    Callback = function(Value)
        silentAimSettings.FOVSize = Value
        updateFOV()
    end,
})

MainTab:CreateColorPicker({
    Name = "FOV Color",
    Color = silentAimSettings.FOVColor,
    Flag = "FOVColor",
    Callback = function(Value)
        silentAimSettings.FOVColor = Value
        updateFOV()
    end
})

MainTab:CreateSlider({
    Name = "FOV Transparency",
    Range = {0, 1},
    Increment = 0.05,
    Suffix = "",
    CurrentValue = silentAimSettings.FOVTransparency,
    Flag = "FOVTransparency",
    Callback = function(Value)
        silentAimSettings.FOVTransparency = Value
        updateFOV()
    end,
})

MainTab:CreateToggle({
    Name = "FOV Filled",
    CurrentValue = silentAimSettings.FOVFilled,
    Flag = "FOVFilled",
    Callback = function(Value)
        silentAimSettings.FOVFilled = Value
        updateFOV()
    end,
})

MainTab:CreateSlider({
    Name = "FOV Thickness",
    Range = {1, 5},
    Increment = 1,
    Suffix = "px",
    CurrentValue = silentAimSettings.FOVThickness,
    Flag = "FOVThickness",
    Callback = function(Value)
        silentAimSettings.FOVThickness = Value
        updateFOV()
    end,
})

-- Silent Aim Toggle
local Toggle = MainTab:CreateToggle({
    Name = "Silent Aim Arsenal",
    CurrentValue = silentAimSettings.Enabled,
    Flag = "Toggle1",
    Callback = function(Value)
        silentAimSettings.Enabled = Value
        
        -- Clean up connections
        for _, connection in ipairs(silentAimConnections) do
            connection:Disconnect()
        end
        silentAimConnections = {}
        
        -- Handle FOV circle
        if Value then
            if not fovCircle then createFOV() else updateFOV() end
        elseif fovCircle then
            fovCircle.Visible = false
        end
        
        if not Value then
            -- Reset parts when disabling
            local players = game:GetService("Players")
            for _, player in pairs(players:GetPlayers()) do
                if player ~= players.LocalPlayer and player.Character then
                    for _, partName in ipairs({"RightUpperLeg","LeftUpperLeg","HeadHB","HumanoidRootPart"}) do
                        local part = player.Character:FindFirstChild(partName)
                        if part then
                            part.Transparency = 0
                            part.CanCollide = true
                            part.Size = Vector3.new(1, 1, 1)
                        end
                    end
                end
            end
            return
        end
        
        -- Silent Aim functionality
        local function modifyParts()
            local players = game:GetService("Players")
            local localPlayer = players.LocalPlayer
            
            for _, player in pairs(players:GetPlayers()) do
                if player ~= localPlayer and player.Character then
                    for _, partName in ipairs({"RightUpperLeg","LeftUpperLeg","HeadHB","HumanoidRootPart"}) do
                        local part = player.Character:FindFirstChild(partName)
                        if part then
                            part.Transparency = 10
                            part.CanCollide = false
                            part.Size = Vector3.new(13, 13, 13)
                        end
                    end
                end
            end
        end
        
        modifyParts()
        
        -- Set up connections
        local players = game:GetService("Players")
        
        table.insert(silentAimConnections, players.PlayerAdded:Connect(function(player)
            if not silentAimSettings.Enabled then return end
            table.insert(silentAimConnections, player.CharacterAdded:Connect(function(character)
                if not silentAimSettings.Enabled then return end
                wait(1)
                modifyParts()
            end))
        end))
        
        for _, player in pairs(players:GetPlayers()) do
            if player ~= players.LocalPlayer then
                table.insert(silentAimConnections, player.CharacterAdded:Connect(function(character)
                    if not silentAimSettings.Enabled then return end
                    wait(1)
                    modifyParts()
                end))
            end
        end
        
        table.insert(silentAimConnections, game:GetService("RunService").Heartbeat:Connect(function()
            if not silentAimSettings.Enabled then return end
            modifyParts()
        end))
    end,
})

-- ESP Controls
MainTab:CreateToggle({
    Name = "ESP",
    CurrentValue = espSettings.Enabled,
    Flag = "ESPEnabled",
    Callback = function(Value)
        espSettings.Enabled = Value
        
        for _, connection in ipairs(espConnections) do
            connection:Disconnect()
        end
        espConnections = {}
        
        if Value then
            table.insert(espConnections, game.Players.PlayerAdded:Connect(function(player)
                if espSettings.Enabled then
                    coroutine.wrap(function()
                        if not player.Character then
                            player.CharacterAdded:Wait()
                        end
                        createEsp(player)
                    end)()
                end
            end))
            
            table.insert(espConnections, game.Players.PlayerRemoving:Connect(removeEsp))
            setupEsp()
        else
            for player in pairs(espObjects) do
                removeEsp(player)
            end
        end
    end,
})

MainTab:CreateToggle({
    Name = "Show Everyone",
    CurrentValue = espSettings.ShowEveryone,
    Flag = "ShowEveryone",
    Callback = function(Value)
        espSettings.ShowEveryone = Value
        setupEsp()
    end,
})

MainTab:CreateToggle({
    Name = "Head Dot",
    CurrentValue = espSettings.ShowDot,
    Flag = "ShowDot",
    Callback = function(Value)
        espSettings.ShowDot = Value
        updateAllEsp()
    end,
})

MainTab:CreateSlider({
    Name = "Dot Size",
    Range = {2, 10},
    Increment = 1,
    Suffix = "px",
    CurrentValue = espSettings.DotSize,
    Flag = "DotSize",
    Callback = function(Value)
        espSettings.DotSize = Value
        updateAllEsp()
    end,
})

MainTab:CreateToggle({
    Name = "NameTags",
    CurrentValue = espSettings.ShowNames,
    Flag = "NameTagsEnabled",
    Callback = function(Value)
        espSettings.ShowNames = Value
        updateAllEsp()
    end,
})

MainTab:CreateSlider({
    Name = "NameTag Size",
    Range = {10, 30},
    Increment = 1,
    Suffix = "px",
    CurrentValue = espSettings.NameSize,
    Flag = "NameTagSize",
    Callback = function(Value)
        espSettings.NameSize = Value
        updateAllEsp()
    end,
})

MainTab:CreateColorPicker({
    Name = "ESP Color",
    Color = espSettings.BoxColor,
    Flag = "ESPColor",
    Callback = function(Value)
        espSettings.BoxColor = Value
        if not espSettings.RainbowMode then
            updateAllEsp()
        end
    end
})

MainTab:CreateColorPicker({
    Name = "Dot Color",
    Color = espSettings.DotColor,
    Flag = "DotColor",
    Callback = function(Value)
        espSettings.DotColor = Value
        if not espSettings.RainbowMode then
            updateAllEsp()
        end
    end
})

MainTab:CreateToggle({
    Name = "Rainbow ESP",
    CurrentValue = espSettings.RainbowMode,
    Flag = "RainbowMode",
    Callback = function(Value)
        espSettings.RainbowMode = Value
        updateAllEsp()
    end,
})

MainTab:CreateSlider({
    Name = "Rainbow Speed",
    Range = {0.5, 3},
    Increment = 0.1,
    Suffix = "x",
    CurrentValue = espSettings.RainbowSpeed,
    Flag = "RainbowSpeed",
    Callback = function(Value)
        espSettings.RainbowSpeed = Value
    end,
})

-- Theme Dropdown
local ThemeDropdown = ThemesTab:CreateDropdown({
   Name = "Select Theme",
   Options = {
       "Default", 
       "Amber Glow", 
       "Amethyst", 
       "Bloom", 
       "Dark Blue", 
       "Green", 
       "Light", 
       "Ocean", 
       "Serenity"
   },
   CurrentOption = {"Default"},
   MultipleOptions = false,
   Flag = "ThemeSelector",
   Callback = function(Selected)
       local themeMap = {
           ["Default"] = "Default",
           ["Amber Glow"] = "AmberGlow",
           ["Amethyst"] = "Amethyst",
           ["Bloom"] = "Bloom",
           ["Dark Blue"] = "DarkBlue",
           ["Green"] = "Green",
           ["Light"] = "Light",
           ["Ocean"] = "Ocean",
           ["Serenity"] = "Serenity"
       }
       
       if themeMap[Selected[1]] then
           Window.ModifyTheme(themeMap[Selected[1]])
       end
   end,
})

-- Screen resizing handler for FOV circle
game:GetService("RunService").RenderStepped:Connect(function()
    if fovCircle and silentAimSettings.Enabled and silentAimSettings.ShowFOV then
        local viewportSize = workspace.CurrentCamera.ViewportSize
        fovCircle.Position = Vector2.new(viewportSize.X/2, viewportSize.Y/2)
    end
end)

-- Cleanup
Rayfield:DestroySignal():Connect(function()
    for player in pairs(espObjects) do
        removeEsp(player)
    end
    for _, connection in ipairs(espConnections) do
        connection:Disconnect()
    end
    for _, connection in ipairs(silentAimConnections) do
        connection:Disconnect()
    end
    if fovCircle then
        fovCircle:Remove()
        fovCircle = nil
    end
end)
